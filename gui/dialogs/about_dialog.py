"""
Di√°logo "Acerca de" para el Simulador MFSU
Unified Stochastic Fractal Model Simulator

Este m√≥dulo contiene la ventana de informaci√≥n sobre el proyecto MFSU,
incluyendo detalles t√©cnicos, cr√©ditos y referencias.
"""

import tkinter as tk
from tkinter import ttk, messagebox
import webbrowser
from tkinter import font as tkFont


class AboutDialog:
    """
    Di√°logo que muestra informaci√≥n sobre el simulador MFSU,
    incluyendo la f√≥rmula principal, aplicaciones y cr√©ditos.
    """
    
    def __init__(self, parent):
        """
        Inicializa el di√°logo "Acerca de".
        
        Args:
            parent: Ventana padre
        """
        self.parent = parent
        self.dialog = None
        
    def show(self):
        """Muestra el di√°logo "Acerca de"."""
        if self.dialog is not None:
            self.dialog.lift()
            return
            
        # Crear ventana del di√°logo
        self.dialog = tk.Toplevel(self.parent)
        self.dialog.title("Acerca de MFSU Simulator")
        self.dialog.geometry("800x700")
        self.dialog.resizable(True, True)
        
        # Centrar la ventana
        self._center_window()
        
        # Configurar el estilo
        self._setup_styles()
        
        # Crear el contenido
        self._create_content()
        
        # Configurar eventos
        self.dialog.protocol("WM_DELETE_WINDOW", self._on_close)
        self.dialog.transient(self.parent)
        self.dialog.grab_set()
        
    def _center_window(self):
        """Centra la ventana en la pantalla."""
        self.dialog.update_idletasks()
        width = self.dialog.winfo_width()
        height = self.dialog.winfo_height()
        x = (self.dialog.winfo_screenwidth() // 2) - (width // 2)
        y = (self.dialog.winfo_screenheight() // 2) - (height // 2)
        self.dialog.geometry(f"{width}x{height}+{x}+{y}")
        
    def _setup_styles(self):
        """Configura los estilos de fuente."""
        self.title_font = tkFont.Font(family="Arial", size=16, weight="bold")
        self.subtitle_font = tkFont.Font(family="Arial", size=12, weight="bold")
        self.normal_font = tkFont.Font(family="Arial", size=10)
        self.code_font = tkFont.Font(family="Consolas", size=9)
        
    def _create_content(self):
        """Crea el contenido principal del di√°logo."""
        # Crear notebook para pesta√±as
        notebook = ttk.Notebook(self.dialog)
        notebook.pack(fill="both", expand=True, padx=10, pady=10)
        
        # Pesta√±a principal
        self._create_main_tab(notebook)
        
        # Pesta√±a de f√≥rmula
        self._create_formula_tab(notebook)
        
        # Pesta√±a de aplicaciones
        self._create_applications_tab(notebook)
        
        # Pesta√±a de cr√©ditos
        self._create_credits_tab(notebook)
        
        # Bot√≥n de cerrar
        btn_frame = tk.Frame(self.dialog)
        btn_frame.pack(fill="x", padx=10, pady=(0, 10))
        
        close_btn = ttk.Button(btn_frame, text="Cerrar", command=self._on_close)
        close_btn.pack(side="right")
        
    def _create_main_tab(self, notebook):
        """Crea la pesta√±a principal con informaci√≥n general."""
        main_frame = ttk.Frame(notebook)
        notebook.add(main_frame, text="General")
        
        # Crear canvas con scrollbar
        canvas = tk.Canvas(main_frame)
        scrollbar = ttk.Scrollbar(main_frame, orient="vertical", command=canvas.yview)
        scrollable_frame = ttk.Frame(canvas)
        
        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )
        
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        # T√≠tulo principal
        title_label = tk.Label(
            scrollable_frame, 
            text="MFSU Simulator", 
            font=self.title_font,
            fg="#2C3E50"
        )
        title_label.pack(pady=(20, 5))
        
        subtitle_label = tk.Label(
            scrollable_frame, 
            text="Unified Stochastic Fractal Model Simulator", 
            font=self.subtitle_font,
            fg="#34495E"
        )
        subtitle_label.pack(pady=(0, 20))
        
        # Informaci√≥n del proyecto
        info_text = """
MFSU Simulator es una herramienta avanzada de simulaci√≥n que implementa el
Modelo Fractal Estoc√°stico Unificado para el an√°lisis de sistemas complejos
en m√∫ltiples dominios cient√≠ficos.

Versi√≥n: 1.0.0
Desarrollado en Python con interfaces gr√°fica y web

CARACTER√çSTICAS PRINCIPALES:
‚Ä¢ Implementaci√≥n completa de la ecuaci√≥n MFSU
‚Ä¢ Operadores fraccionarios de alta precisi√≥n
‚Ä¢ Procesos estoc√°sticos con ruido fractal
‚Ä¢ An√°lisis de dimensi√≥n fractal
‚Ä¢ Visualizaciones interactivas en tiempo real
‚Ä¢ M√∫ltiples aplicaciones cient√≠ficas

CAPACIDADES T√âCNICAS:
‚Ä¢ Simulaci√≥n num√©rica de alta performance con Numba
‚Ä¢ An√°lisis espectral y estad√≠stico avanzado
‚Ä¢ Exportaci√≥n de datos en m√∫ltiples formatos
‚Ä¢ Interfaz web responsiva con Plotly
‚Ä¢ Documentaci√≥n completa con Sphinx
‚Ä¢ Suite completa de pruebas automatizadas
        """
        
        info_label = tk.Label(
            scrollable_frame,
            text=info_text.strip(),
            font=self.normal_font,
            justify="left",
            wraplength=750
        )
        info_label.pack(pady=10, padx=20)
        
        # Link al repositorio
        link_frame = tk.Frame(scrollable_frame)
        link_frame.pack(pady=20)
        
        link_label = tk.Label(
            link_frame,
            text="üîó Repositorio en Zenodo:",
            font=self.normal_font
        )
        link_label.pack()
        
        zenodo_btn = tk.Button(
            link_frame,
            text="https://zenodo.org/records/15828185",
            fg="blue",
            cursor="hand2",
            relief="flat",
            command=lambda: webbrowser.open("https://zenodo.org/records/15828185")
        )
        zenodo_btn.pack(pady=5)
        
        # Empaquetar canvas y scrollbar
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
    def _create_formula_tab(self, notebook):
        """Crea la pesta√±a con la f√≥rmula MFSU."""
        formula_frame = ttk.Frame(notebook)
        notebook.add(formula_frame, text="F√≥rmula MFSU")
        
        # Canvas con scrollbar
        canvas = tk.Canvas(formula_frame)
        scrollbar = ttk.Scrollbar(formula_frame, orient="vertical", command=canvas.yview)
        scrollable_frame = ttk.Frame(canvas)
        
        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )
        
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        # T√≠tulo
        title_label = tk.Label(
            scrollable_frame,
            text="Ecuaci√≥n del Modelo Fractal Estoc√°stico Unificado (MFSU)",
            font=self.subtitle_font,
            fg="#2C3E50"
        )
        title_label.pack(pady=20)
        
        # F√≥rmula principal
        formula_text = "‚àÇœà/‚àÇt = Œ±(-Œî)^(Œ±/2)œà + Œ≤ Œæ_H(x,t)œà - Œ≥œà¬≥ + f(x,t)"
        
        formula_frame_inner = tk.Frame(scrollable_frame, bg="#F8F9FA", relief="solid", bd=1)
        formula_frame_inner.pack(pady=20, padx=20, fill="x")
        
        formula_label = tk.Label(
            formula_frame_inner,
            text=formula_text,
            font=("Times New Roman", 14),
            bg="#F8F9FA",
            fg="#2C3E50"
        )
        formula_label.pack(pady=15)
        
        # Explicaci√≥n de t√©rminos
        explanation_text = """
COMPONENTES DE LA ECUACI√ìN:

‚Ä¢ ‚àÇœà/‚àÇt: Derivada temporal del campo œà
‚Ä¢ Œ±(-Œî)^(Œ±/2)œà: T√©rmino de difusi√≥n fraccionaria
  - Œ±: Par√°metro de orden fraccionario (0 < Œ± ‚â§ 2)
  - (-Œî)^(Œ±/2): Operador Laplaciano fraccionario
‚Ä¢ Œ≤ Œæ_H(x,t)œà: T√©rmino estoc√°stico
  - Œ≤: Intensidad del ruido
  - Œæ_H(x,t): Ruido fractal con par√°metro de Hurst H
‚Ä¢ -Œ≥œà¬≥: T√©rmino no lineal (tipo Ginzburg-Landau)
  - Œ≥: Par√°metro de no linealidad
‚Ä¢ f(x,t): T√©rmino de forzamiento externo

CARACTER√çSTICAS F√çSICAS:

‚Ä¢ Combina difusi√≥n fraccionaria y procesos estoc√°sticos
‚Ä¢ Incluye no linealidades que permiten formaci√≥n de estructuras
‚Ä¢ Permite forzamiento externo para simulaciones espec√≠ficas
‚Ä¢ Describe fen√≥menos de memoria larga y correlaciones espaciales
‚Ä¢ Aplicable a sistemas con propiedades fractales
        """
        
        explanation_label = tk.Label(
            scrollable_frame,
            text=explanation_text.strip(),
            font=self.normal_font,
            justify="left",
            wraplength=750
        )
        explanation_label.pack(pady=10, padx=20)
        
        # Empaquetar canvas y scrollbar
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
    def _create_applications_tab(self, notebook):
        """Crea la pesta√±a de aplicaciones."""
        apps_frame = ttk.Frame(notebook)
        notebook.add(apps_frame, text="Aplicaciones")
        
        # Canvas con scrollbar
        canvas = tk.Canvas(apps_frame)
        scrollbar = ttk.Scrollbar(apps_frame, orient="vertical", command=canvas.yview)
        scrollable_frame = ttk.Frame(canvas)
        
        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )
        
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        # T√≠tulo
        title_label = tk.Label(
            scrollable_frame,
            text="Aplicaciones del Modelo MFSU",
            font=self.subtitle_font,
            fg="#2C3E50"
        )
        title_label.pack(pady=20)
        
        applications_text = """
El simulador MFSU incluye implementaciones especializadas para diversos
dominios cient√≠ficos:

üî¨ SUPERCONDUCTIVIDAD
‚Ä¢ An√°lisis de transiciones de fase en superconductores
‚Ä¢ Modelado de redes de v√≥rtices en superconductores tipo II
‚Ä¢ Simulaci√≥n de propiedades cr√≠ticas y temperaturas de transici√≥n
‚Ä¢ Aplicaciones en materiales de alta temperatura cr√≠tica

‚ö° DIN√ÅMICA DE GASES Y FLUIDOS
‚Ä¢ Turbulencia fractal en fluidos complejos
‚Ä¢ An√°lisis de cascadas de energ√≠a en turbulencia
‚Ä¢ Modelado de flujos con memoria larga
‚Ä¢ Simulaci√≥n de procesos de mezcla an√≥malos

üåå COSMOLOG√çA Y ASTROF√çSICA
‚Ä¢ Formaci√≥n de estructuras a gran escala del universo
‚Ä¢ An√°lisis de fluctuaciones en el fondo c√≥smico de microondas
‚Ä¢ Modelado de materia oscura con propiedades fractales
‚Ä¢ Simulaci√≥n de procesos de acreci√≥n en agujeros negros

üß¨ BIOF√çSICA Y SISTEMAS BIOL√ìGICOS
‚Ä¢ Modelado de difusi√≥n an√≥mala en membranas celulares
‚Ä¢ An√°lisis de patrones fractales en crecimiento biol√≥gico
‚Ä¢ Simulaci√≥n de procesos de se√±alizaci√≥n celular
‚Ä¢ Modelado de redes neuronales con conectividad fractal

üí∞ FINANZAS Y ECONOF√çSICA
‚Ä¢ An√°lisis de series temporales financieras con memoria larga
‚Ä¢ Modelado de volatilidad con procesos fractales
‚Ä¢ Simulaci√≥n de burbujas especulativas y crashes
‚Ä¢ An√°lisis de correlaciones en mercados complejos

üåç CIENCIAS DE LA TIERRA
‚Ä¢ Modelado de procesos s√≠smicos con estad√≠sticas fractales
‚Ä¢ An√°lisis de patrones clim√°ticos con memoria larga
‚Ä¢ Simulaci√≥n de procesos de erosi√≥n y sedimentaci√≥n
‚Ä¢ Modelado de redes hidrol√≥gicas fractales

VENTAJAS DEL ENFOQUE UNIFICADO:
‚Ä¢ Marco te√≥rico consistente para m√∫ltiples dominios
‚Ä¢ Par√°metros f√≠sicamente interpretables
‚Ä¢ Flexibilidad para diferentes condiciones iniciales
‚Ä¢ Capacidad de an√°lisis comparativo entre aplicaciones
‚Ä¢ Validaci√≥n cruzada entre diferentes fen√≥menos
        """
        
        apps_label = tk.Label(
            scrollable_frame,
            text=applications_text.strip(),
            font=self.normal_font,
            justify="left",
            wraplength=750
        )
        apps_label.pack(pady=10, padx=20)
        
        # Empaquetar canvas y scrollbar
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
    def _create_credits_tab(self, notebook):
        """Crea la pesta√±a de cr√©ditos."""
        credits_frame = ttk.Frame(notebook)
        notebook.add(credits_frame, text="Cr√©ditos")
        
        # Canvas con scrollbar
        canvas = tk.Canvas(credits_frame)
        scrollbar = ttk.Scrollbar(credits_frame, orient="vertical", command=canvas.yview)
        scrollable_frame = ttk.Frame(canvas)
        
        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )
        
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        # T√≠tulo
        title_label = tk.Label(
            scrollable_frame,
            text="Equipo de Desarrollo y Agradecimientos",
            font=self.subtitle_font,
            fg="#2C3E50"
        )
        title_label.pack(pady=20)
        
        credits_text = """
EQUIPO DE DESARROLLO MFSU:
‚Ä¢ Desarrollo del modelo te√≥rico
‚Ä¢ Implementaci√≥n num√©rica y algoritmos
‚Ä¢ Interfaces gr√°fica y web
‚Ä¢ Documentaci√≥n y validaci√≥n

TECNOLOG√çAS UTILIZADAS:
‚Ä¢ Python 3.8+ - Lenguaje principal
‚Ä¢ NumPy & SciPy - Computaci√≥n num√©rica
‚Ä¢ Matplotlib & Plotly - Visualizaci√≥n
‚Ä¢ Numba - Aceleraci√≥n de c√≥digo
‚Ä¢ tkinter - Interfaz gr√°fica nativa
‚Ä¢ Flask - Aplicaci√≥n web
‚Ä¢ Jupyter - Notebooks interactivos
‚Ä¢ Sphinx - Documentaci√≥n

BIBLIOTECAS ESPECIALIZADAS:
‚Ä¢ PyFFTW - Transformadas de Fourier optimizadas
‚Ä¢ scikit-learn - An√°lisis estad√≠stico
‚Ä¢ H5PY - Manejo de datasets grandes
‚Ä¢ Pandas - Manipulaci√≥n de datos
‚Ä¢ YAML - Configuraci√≥n flexible

AGRADECIMIENTOS ESPECIALES:
‚Ä¢ Comunidad cient√≠fica internacional por el feedback
‚Ä¢ Desarrolladores de software libre y c√≥digo abierto
‚Ä¢ Investigadores en c√°lculo fraccionario y procesos estoc√°sticos
‚Ä¢ Beta testers y usuarios pioneros del simulador

LICENCIA:
Este proyecto se distribuye bajo licencia de c√≥digo abierto.
Consulte el archivo LICENSE para m√°s detalles.

CONTACTO Y SOPORTE:
‚Ä¢ Documentaci√≥n: docs/build/html/index.html
‚Ä¢ Issues y reportes: Repositorio en Zenodo
‚Ä¢ Comunidad: Foros de discusi√≥n cient√≠fica

C√ìMO CITAR:
Si utiliza MFSU Simulator en su investigaci√≥n, por favor cite:
"MFSU Simulator: Unified Stochastic Fractal Model Simulator"
Zenodo: https://zenodo.org/records/15828185

VERSION HISTORY:
‚Ä¢ v1.0.0 (2025): Lanzamiento inicial
  - Implementaci√≥n completa de la ecuaci√≥n MFSU
  - Interfaces gr√°fica y web funcionales
  - Aplicaciones en superconductividad, din√°mica de gases y cosmolog√≠a
  - Suite completa de an√°lisis fractales y estad√≠sticos
        """
        
        credits_label = tk.Label(
            scrollable_frame,
            text=credits_text.strip(),
            font=self.normal_font,
            justify="left",
            wraplength=750
        )
        credits_label.pack(pady=10, padx=20)
        
        # Empaquetar canvas y scrollbar
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
    def _on_close(self):
        """Cierra el di√°logo."""
        if self.dialog:
            self.dialog.grab_release()
            self.dialog.destroy()
            self.dialog = None


# Funci√≥n de conveniencia para mostrar el di√°logo
def show_about_dialog(parent):
    """
    Muestra el di√°logo "Acerca de" del simulador MFSU.
    
    Args:
        parent: Ventana padre
    """
    about = AboutDialog(parent)
    about.show()


if __name__ == "__main__":
    # Prueba independiente del di√°logo
    root = tk.Tk()
    root.withdraw()  # Ocultar ventana principal para la prueba
    
    about = AboutDialog(root)
    about.show()
    
    root.mainloop()
